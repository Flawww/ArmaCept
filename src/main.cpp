#include "pch.h"
#include "a3parser.h"
#include "cheat.h"

a3parser* g_parser = nullptr;
network_hack* g_cheat = nullptr;

static uint8_t resp[] = { 0x45, 0x00, 0x02, 0xFF, 0x49, 0x5A, 0x00, 0x00, 0x7F, 0x11, 0x4C, 0xFD, 0x0A, 0x2A, 0x00, 0xE8,
0x6D, 0xAD, 0x29, 0xD8, 0x09, 0x02, 0x09, 0x16, 0x02, 0xEB, 0x29, 0x59, 0xE3, 0x02, 0x24, 0x21,
0x19, 0x09, 0x56, 0x3E, 0x17, 0x19, 0xBA, 0x2E, 0x41, 0xA2, 0xE8, 0x3E, 0xF5, 0xFB, 0x55, 0x1D,
0x23, 0x83, 0xB3, 0x22, 0x9D, 0x41, 0xA2, 0x41, 0xCC, 0xC4, 0x71, 0x63, 0xF0, 0x56, 0xB1, 0x3A,
0x46, 0x7C, 0xE2, 0x0E, 0x69, 0x37, 0x4D, 0x55, 0xE9, 0xBF, 0x7D, 0xE6, 0xCE, 0xF3, 0x06, 0xA5,
0x72, 0x70, 0x24, 0x4D, 0xA3, 0x24, 0xAA, 0x9A, 0x66, 0x29, 0x22, 0x06, 0xF2, 0xD9, 0xF8, 0xF8,
0x35, 0x04, 0x2C, 0xB0, 0x9F, 0x6C, 0x5B, 0x2E, 0x4B, 0xAD, 0xC5, 0x89, 0x44, 0xE3, 0xC5, 0x1E,
0xF0, 0xBC, 0x5B, 0xF4, 0xE8, 0x3F, 0x2C, 0xE4, 0xA2, 0x23, 0x8C, 0x08, 0x51, 0x90, 0x48, 0x38,
0x0F, 0xA8, 0x4B, 0x0E, 0x99, 0xB2, 0xA7, 0x91, 0xEB, 0x8E, 0x89, 0xFD, 0x6E, 0xFA, 0xEA, 0x52,
0x99, 0xDF, 0x78, 0x5D, 0x50, 0x90, 0xCD, 0x27, 0xB4, 0xF3, 0x30, 0x80, 0x93, 0x11, 0xE3, 0x0B,
0x50, 0xC6, 0x03, 0x60, 0xD6, 0x41, 0xD9, 0x14, 0xB5, 0x4B, 0xE5, 0xA5, 0xB3, 0xEC, 0xEC, 0x63,
0x3D, 0x64, 0x93, 0x43, 0x65, 0x23, 0x4B, 0x62, 0xBC, 0x78, 0xC0, 0xD3, 0x3C, 0x55, 0x5E, 0x35,
0xE2, 0x7E, 0x86, 0xCE, 0x58, 0x5A, 0xBB, 0xD5, 0xD7, 0xE7, 0xB2, 0x23, 0xDD, 0xBF, 0x13, 0x16,
0x9A, 0xF5, 0x49, 0x51, 0x4A, 0x14, 0x67, 0x79, 0x12, 0x61, 0x54, 0x12, 0xDA, 0x81, 0xA8, 0x1D,
0x7B, 0x54, 0x72, 0x7B, 0x07, 0x7F, 0xE6, 0x6A, 0xB2, 0x72, 0xBE, 0x3E, 0xFC, 0x94, 0xC2, 0x6E,
0x37, 0x0F, 0x21, 0x71, 0x21, 0x5D, 0xF4, 0x92, 0x75, 0x94, 0x57, 0x49, 0x94, 0xFC, 0xE6, 0x2C,
0xFB, 0xB4, 0x0B, 0x82, 0xD6, 0x80, 0x29, 0x7C, 0x77, 0x33, 0xCD, 0x25, 0xC3, 0x37, 0x3D, 0xDB,
0x0E, 0x8F, 0x9A, 0x73, 0x5E, 0x89, 0x9B, 0xE8, 0x12, 0x88, 0xFE, 0x87, 0x02, 0xED, 0x3B, 0x2A,
0x2B, 0x35, 0xE1, 0x68, 0x75, 0x41, 0xE3, 0x60, 0xE5, 0x34, 0x9D, 0x59, 0xD0, 0x7D, 0xC6, 0x75,
0xF5, 0x19, 0x7F, 0x34, 0x47, 0xBD, 0xD3, 0xDE, 0x7B, 0xC2, 0xBA, 0xA1, 0xB7, 0xB9, 0xB0, 0x14,
0x9E, 0x5F, 0x5C, 0x1B, 0xF1, 0xFB, 0xCF, 0x92, 0xA6, 0xBA, 0xA6, 0x9A, 0x07, 0x90, 0x9E, 0x3C,
0x42, 0x71, 0xB4, 0x64, 0x95, 0x3E, 0x00, 0x13, 0xBB, 0xA6, 0x9D, 0x0D, 0x9C, 0x23, 0xD3, 0x33,
0x38, 0xF2, 0x62, 0x0E, 0xFB, 0xE3, 0xC6, 0x95, 0x6C, 0x4C, 0x74, 0x32, 0x01, 0x20, 0x01, 0xE4,
0x42, 0x51, 0x38, 0xB5, 0x56, 0xED, 0x8B, 0x5B, 0x95, 0x47, 0x62, 0x48, 0x6A, 0x07, 0x69, 0x2C,
0xAA, 0x5C, 0x82, 0x07, 0x28, 0x33, 0x3E, 0xA5, 0x58, 0x1A, 0x57, 0xF3, 0x80, 0xAD, 0xC4, 0x0F,
0xD8, 0xEE, 0xE2, 0x3E, 0x6A, 0x67, 0x01, 0xEF, 0x3D, 0xBC, 0x13, 0x81, 0xC3, 0xBE, 0xF1, 0xFB,
0xE7, 0x8C, 0xC0, 0x1C, 0x86, 0x97, 0x31, 0xEA, 0x95, 0x3E, 0x51, 0x87, 0x0B, 0x75, 0x2F, 0xD5,
0x0B, 0x4E, 0xF6, 0x53, 0x72, 0x32, 0xA2, 0x13, 0xE9, 0x40, 0x7A, 0xB7, 0xB3, 0x66, 0xD0, 0xF4,
0xFC, 0x86, 0x11, 0xBB, 0x65, 0x22, 0x57, 0x4C, 0x1D, 0x2C, 0x08, 0x56, 0x9A, 0x9C, 0x8F, 0x37,
0x55, 0xCC, 0x49, 0xE2, 0x03, 0x84, 0xA3, 0x7C, 0x89, 0x7A, 0xF7, 0xA0, 0xB0, 0x32, 0x28, 0x4F,
0xDA, 0xF9, 0x18, 0x73, 0xE6, 0x1D, 0x73, 0x8D, 0xB6, 0x1E, 0x10, 0xA4, 0x19, 0x62, 0xDF, 0x59,
0x8B, 0x2B, 0xB6, 0xC0, 0x30, 0x1F, 0xE3, 0x41, 0x96, 0x92, 0x3F, 0x56, 0x0E, 0x54, 0x37, 0x6E,
0xE5, 0x1E, 0x89, 0x47, 0x68, 0xD4, 0x3E, 0x52, 0x15, 0x6C, 0x4D, 0x11, 0xCF, 0xAA, 0xC1, 0x7B,
0x77, 0x8E, 0x65, 0x1B, 0x6E, 0x9A, 0xD5, 0x2D, 0xA5, 0xA0, 0xD5, 0x16, 0xA7, 0x08, 0xC8, 0xE3,
0xF6, 0xB2, 0x60, 0xC4, 0x69, 0xAA, 0xDA, 0xA8, 0x2B, 0xA5, 0xF3, 0xCF, 0x4F, 0x62, 0x98, 0x86,
0x02, 0x1C, 0xFD, 0xA5, 0x68, 0xE9, 0x12, 0xA6, 0xDD, 0xC8, 0xB4, 0xB2, 0x45, 0x06, 0x57, 0x1C,
0x33, 0xB2, 0x65, 0x48, 0x2C, 0xA9, 0x14, 0x9E, 0x53, 0x8B, 0x6C, 0x3E, 0x2A, 0x39, 0x86, 0x76,
0x36, 0xBF, 0x53, 0xB3, 0x76, 0x30, 0xB5, 0x16, 0xBE, 0xC7, 0xB4, 0x55, 0x93, 0x67, 0xAF, 0x21,
0xFC, 0x40, 0xF4, 0x52, 0xC9, 0x75, 0xB8, 0xD9, 0x1A, 0x00, 0x43, 0x9D, 0x9F, 0x5D, 0x05, 0xFC,
0xC1, 0xF8, 0x0C, 0x4C, 0x70, 0x18, 0xD8, 0x91, 0x89, 0xB4, 0x45, 0xE7, 0x0C, 0x8B, 0x11, 0x05,
0x89, 0xE5, 0x0E, 0xE8, 0x38, 0x49, 0x13, 0x57, 0xC4, 0xF5, 0xD2, 0x0B, 0x3B, 0x5A, 0x01, 0x66,
0xB3, 0x8C, 0x03, 0x21, 0x49, 0x3F, 0xDE, 0x00, 0xEA, 0x77, 0x2D, 0x54, 0x28, 0xBF, 0x61, 0x75,
0x41, 0x39, 0x54, 0x37, 0xFE, 0x97, 0x86, 0x67, 0xE2, 0x54, 0xEF, 0x1E, 0xAB, 0x71, 0x94, 0xBC,
0xEE, 0x7E, 0xA5, 0xFD, 0x4E, 0x0E, 0xFF, 0x19, 0x0A, 0xE1, 0x20, 0x18, 0xEA, 0x79, 0xB8, 0x60,
0x76, 0x9B, 0x59, 0xA1, 0x26, 0x71, 0xFC, 0xAF, 0xD5, 0xF5, 0x23, 0xC4, 0xF4, 0x16, 0xC1, 0x5C,
0xD3, 0xF9, 0x13, 0x47, 0xD2, 0xB1, 0x6B, 0xEF, 0x8E, 0x9B, 0x1D, 0x9B, 0x95, 0x5F, 0xFF, 0xA3,
0x06, 0x74, 0x84, 0xCC, 0x1E, 0x7C, 0x54, 0xB9, 0x4F, 0x32, 0xB9, 0x8C, 0xEB, 0x3D, 0x22, 0xD3,
0xE3, 0x1D, 0x23, 0xB1, 0x02, 0xBC, 0x3A, 0xF0, 0x3F, 0x04, 0x43, 0x21, 0x03, 0xF7, 0xF6};

static int filter_callback(struct nfq_q_handle* queue, struct nfgenmsg* nfmsg, struct nfq_data* nfad, void* data) {
    nfqnl_msg_packet_hdr* ph = nfq_get_msg_packet_hdr(nfad);
    if (ph) {
        unsigned char* raw = nullptr;
        int len = nfq_get_payload(nfad, &raw);
        if (len) {
            pkt_buff* pkbuf = pktb_alloc(AF_INET, raw, len, 0x1000);
            if (pkbuf) {
                iphdr* ip = nfq_ip_get_hdr(pkbuf);
                nfq_ip_set_transport_header(pkbuf, ip);

                if (ip->protocol == UDP_PROTOCOL && g_parser->parse_packet(pktb_data(pkbuf))) {
                    return nfq_set_verdict(queue, ntohl(ph->packet_id), NF_ACCEPT, ntohs(ip->tot_len), pktb_data(pkbuf));
                }
                //udphdr* udph = (udphdr*)(uintptr_t(ip) + sizeof(iphdr));
                //uint16_t be_port = htons(2306);
                //int size = ntohs(udph->len) - sizeof(udphdr);
                //if ((udph->uh_dport == be_port || udph->uh_sport == be_port) && (size > 0x170 && size < 0x250 && udph->uh_sport == 521)) {
                //    printf("Dropping packet of %x bytes\n", size);

                //    return nfq_set_verdict(queue, ntohl(ph->packet_id), NF_DROP, sizeof(resp), resp);
                //}
            }
        }
    }
    return nfq_set_verdict(queue, ntohl(ph->packet_id), NF_ACCEPT, 0, nullptr);
}

int main(int argc, char** argv) {
    if (argc != 2) {
        printf("Invalid amount or arguments (%i recieved, 1 expected) \n", argc - 1);
        return 0;
    }

    nfq_handle* handler = nfq_open();
    if (!handler) {
        printf("Failed to open nfq\n");
        return 0;
    }

    nfq_q_handle* queue = nfq_create_queue(handler, 0, filter_callback, nullptr);
    if (!queue) {
        printf("Couldn't create queue handler\n");
        nfq_close(handler);
        return 0;
    }

    if (nfq_set_mode(queue, NFQNL_COPY_PACKET, 0xFFFF)) {
        printf("Couldn't set nfq mode\n");
        nfq_close(handler);
        nfq_destroy_queue(queue);
        return 0;
    }

    // create the "cheat" object
    uint32_t addr = inet_addr(argv[1]);
    printf("Searching for arma server on ip %s\n", argv[1]);
    g_parser = new a3parser((uint8_t*)&addr);
    g_cheat = new network_hack();

    int fd = nfq_fd(handler);
    static char buffer[0xFFFF];
    while (true) {
        int len = recv(fd, buffer, 0xFFFF, 0);
        if (len < 0) {
            printf("Negative packet length (?)\n");
            continue;
        }
        nfq_handle_packet(handler, buffer, len);
    }

    delete g_parser;
    delete g_cheat;
    nfq_close(handler);
    nfq_destroy_queue(queue);

    return 0;
}